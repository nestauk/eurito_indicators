import * as _ from 'lamb';
import {derived, get, writable} from 'svelte/store';
import {
	isNot,
	isNotNull,
	makeMergeAppliedFnMap,
	mergeObj,
} from '@svizzle/utils';

export const defaultA11ySettings = {
	brightness: {
		defaultValue: 100,
		format: 'percentage',
		group: 'color',
		id: 'brightness',
		label: 'Brightness',
		next: 'contrast',
		prev: 'grayscale',
		range: [0, 100],
		value: 100,
	},
	contrast: {
		defaultValue: 100,
		format: 'percentage',
		group: 'color',
		id: 'contrast',
		label: 'Contrast',
		next: null,
		prev: 'brightness',
		range: [0, 100],
		value: 100,
	},
	cvd: {
		currentValueIndex: 0,
		defaultValueIndex: 0,
		group: 'color',
		id: 'cvd',
		label: 'Color Vision Deficiency',
		next: 'hue',
		prev: 'invert',
		value: 'None',
		values: ['None', 'Protanopia', 'Deuteranopia', 'Tritanopia'],
	},
	fontScaling: {
		currentValueIndex: 2,
		defaultValueIndex: 2,
		format: 'percentage',
		group: 'text',
		id: 'fontScaling',
		label: 'Font scale',
		next: 'lineHeight',
		prev: 'typeface',
		value: 100,
		values: [50, 75, 100, 125, 150],
	},
	grayscale: {
		defaultValue: 0,
		format: 'percentage',
		group: 'color',
		id: 'grayscale',
		label: 'Grayscale',
		next: 'brightness',
		prev: 'hue',
		range: [0, 100],
		value: 0,
	},
	hue: {
		defaultValue: 0,
		format: 'degrees',
		group: 'color',
		id: 'hue',
		label: 'Hue',
		next: 'grayscale',
		prev: 'cvd',
		range: [0, 360],
		value: 0,
	},
	invert: {
		defaultValue: false,
		format: 'boolean',
		group: 'color',
		id: 'invert',
		label: 'Invert',
		next: 'cvd',
		prev: 'wordSpacing',
		value: false,
	},
	letterSpacing: {
		currentValueIndex: 0,
		defaultValueIndex: 0,
		format: 'percentage',
		group: 'text',
		id: 'letterSpacing',
		label: 'Letter spacing',
		next: 'wordSpacing',
		prev: 'lineHeight',
		value: 0,
		values: [0, 10, 20],
	},
	lineHeight: {
		currentValueIndex: 1,
		defaultValueIndex: 1,
		format: 'percentage',
		group: 'text',
		id: 'lineHeight',
		label: 'Line height',
		next: 'letterSpacing',
		prev: 'fontScaling',
		value: 125,
		values: [100, 125, 150, 175, 200],
	},
	typeface: {
		currentValueIndex: 0,
		defaultValueIndex: 0,
		group: 'text',
		id: 'typeface',
		label: 'Font',
		next: 'fontScaling',
		prev: null,
		value: 'Archivo',
		values: [
			'Archivo',
			'Avenir Next Variable',
			'Noboto Flex',
			'Open Dyslexia'
		],
	},
	wordSpacing: {
		currentValueIndex: 0,
		defaultValueIndex: 0,
		format: 'percentage',
		group: 'text',
		id: 'wordSpacing',
		label: 'Word spacing',
		next: 'invert',
		prev: 'letterSpacing',
		value: 0,
		values: [0, 20, 40],
	},
};

export const a11ySettings = writable(defaultA11ySettings);

/* init */

const isFirstSetting = _.pipe([_.getKey('prev'), _.isNull]);
const getFirstId = _.pipe([
	_.values,
	_.findWhere(isFirstSetting),
	_.getKey('id')
]);
const firstId = getFirstId(defaultA11ySettings);

/* current setting */

export const currentId = writable(firstId);
export const currentSetting = derived(
	[a11ySettings, currentId],
	([settings, id]) => settings[id]
);

/* formatting */

const formats = {
	'percentage': value => `${value}%`,
	'degrees': value => `${value}Â°`,
	'boolean': value => value ? 'Yes' : 'No',
};
export const formatValue = derived(currentSetting,
	setting => setting.format ? formats[setting.format] : _.identity
);

/* navigation */

export const setNextId = () => currentId.set(get(currentSetting).next);
export const setPrevId = () => currentId.set(get(currentSetting).prev);

export const hasPrev = derived(currentSetting,
	_.pipe([_.getKey('prev'), isNotNull])
);
export const hasNext = derived(currentSetting,
	_.pipe([_.getKey('next'), isNotNull])
);

/* update */

const updateIndexOf = (id, index) => {
	a11ySettings.update(_.updateKey(
		id,
		makeMergeAppliedFnMap({
			currentValueIndex: _.always(index),
			value: _.getPath(`values.${index}`)
		})
	))
};
const updateValueOf = (id, value) => {
	a11ySettings.update(_.updateKey(id, mergeObj({value})))
};
export const updateCurrentValue = value => {
	const setting = get(currentSetting);

	if (setting.values) {
		updateIndexOf(setting.id, value);
	} else {
		updateValueOf(setting.id, value);
	}
};

/* resets */

const getGroupsResetStatus = _.pipe([
	_.values,
	_.groupBy(_.getKey('group')),
	_.mapValuesWith(
		_.pipe([
			_.mapWith(
				_.adapter([
					_.casus(_.hasKey('values'),	_.collect([
						_.getKey('currentValueIndex'),
						_.getKey('defaultValueIndex'),
					])),
					_.casus(_.hasKey('value'), _.collect([
						_.getKey('value'),
						_.getKey('defaultValue'),
					])),
				])
			),
			_.every(_.apply(_.areSame))
		])
	)
]);
export const groupsResetStatus = derived(a11ySettings, getGroupsResetStatus);

const setIndexToDefault = makeMergeAppliedFnMap({
	currentValueIndex: _.getKey('defaultValueIndex'),
	value: _.pipe([
		_.collect([
			_.getKey('values'),
			_.getKey('defaultValueIndex'),
		]),
		_.apply(_.getIndex)
	])
});
const setValueToDefault = makeMergeAppliedFnMap({value: _.getKey('defaultValue')});
const isNotOfGroup = groupId => _.pipe([_.getKey('group'), isNot(groupId)]);
const resetGroupItems = groupId => _.mapValuesWith(_.adapter([
	_.casus(isNotOfGroup(groupId), _.identity),
	_.casus(_.hasKey('values'), setIndexToDefault),
	_.casus(_.hasKey('value'), setValueToDefault),
]));
export const resetGroup = groupId => {
	a11ySettings.update(resetGroupItems(groupId));
}
